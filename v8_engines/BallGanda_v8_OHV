import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

//

//engine_name
label engine_name("BallGanda_LSx_BYOE") //Name that shows in app

label sim_freq(3000)

//idle adjustment
label idle_adjust(0.99)
label idle_cfm(0.1)

/*fuel options: Runs fuel setup i researched params for. The fuels
are under in "fuels setup". To run default sim fuel use
"label type_of_fuel(fuel())" below in "fuel setting"
*/
//Fuel Names: pumpus87gas; pumpus93gas;   fuel()  ;
//      AFRs: 12.5 14.7  ;  12.5 14.7 ; 12.5 14.7 ; 

//fuel setting
label type_of_fuel(pumpus93gas)	//Fuel type in use
label tune_afr(13.5) //afr engine runs at WOT

//engine layout
label crank_stroke(4.0 * units.inch)//LS7 
label crank_mass(57 * units.lb)//LS7  
label crank_flywheel_mass(26.5 * units.lb)//LS7  
label crank_flywheel_dia(14 * units.inch)//LS7
label piston_bore_diameter(4.125 * units.inch)//LS7  
label piston_comp_height(1.175 * units.inch)//LS7  
label piston_mass_wpin(482 * units.g)//LS7 
label rod_length(6.067 * units.inch)//LS7 
label rod_mass(464 * units.g)//LS7 
label eng_compression_ratio(12.0)//LS7  
label eng_rot_friction_torq(64 * units.lb_ft)//LS7  
label eng_v_angle(90 * units.deg)//LS7
label eng_angle_in_chassis(0 * units.deg)//LS7
label eng_head0_flip_display(false)
label eng_head1_flip_display(true)


//timing 							 
label timing_advance(0.0)								
label timing_rpm_0000((0 + timing_advance) * units.deg)
label timing_rpm_0500((0 + timing_advance) * units.deg)
label timing_rpm_1000((20 + timing_advance) * units.deg)
label timing_rpm_1500((20 + timing_advance) * units.deg)
label timing_rpm_2000((25 + timing_advance) * units.deg)
label timing_rpm_2500((30 + timing_advance) * units.deg)
label timing_rpm_3000((34 + timing_advance) * units.deg)
label timing_rpm_3500((38 + timing_advance) * units.deg)
label timing_rpm_4000((44 + timing_advance) * units.deg)
label timing_rpm_4500((50 + timing_advance) * units.deg)
label timing_rpm_5000((56 + timing_advance) * units.deg)
label timing_rpm_5500((62 + timing_advance) * units.deg)
label timing_rpm_6000((69 + timing_advance) * units.deg)
label timing_rpm_6500((71 + timing_advance) * units.deg)
label timing_rpm_7000((73 + timing_advance) * units.deg)
label timing_rpm_7500((75 + timing_advance) * units.deg)
label timing_rpm_8000((77 + timing_advance) * units.deg)
label timing_rpm_8500((79 + timing_advance) * units.deg)
label timing_rpm_9000((81 + timing_advance) * units.deg)


//intake manifold 
label int_throttle_cfm(1170) //LS7 90mm TB 1170CFM
label int_man_plenum_vol(5000 * units.cc)//LS7 estimate 5000cc not including runner volume
label int_man_plenum_xsec_area(50 * units.cm2) 
label int_man_runner_flow_rate(800)						 
label int_man_runner_length(7.5 * units.inch)//LS7 

//camshaft
label cam_inner_base_circle(1.5 * units.inch)			//LS7 

label cam_advance(-3 * units.deg)//LS7 
label cam_int_lobe_center(120.5 * units.deg)//LS7
label cam_exh_lobe_center(120.5 * units.deg)//LS7 
label cam_int_dur_050(210 * units.deg)//LS7
label cam_exh_dur_050(230 * units.deg)//LS7 
label valve_int_lift_advertised(0.593 * units.inch)//LS7
label valve_exh_lift_advertised(0.589 * units.inch)//LS7
label valve_advertised_lift_rocker_ratio(1.8)//LS7
label valve_int_rocker_ratio_sim(1.8)//LS7
label valve_exh_rocker_ratio_sim(1.8)//LS7

//head
label head_int_runner_length(5.628 * units.inch) //LS7
label head_int_runner_vol(259.0 * units.cc)				//LS7 
label head_int_valve_dia(2.2 * units.inch)
label head_int_valve2runner_area_ratio(1.7)
label head_exh_runner_length(3.328 * units.inch)
label head_exh_runner_vol(86 * units.cc)
label head_exh_valve_dia(1.61 * units.inch)			//LS7
label head_exh_valve2runner_area_ratio(1.7)

//head flow
//intake
label int_flow_scalar(1.0)
label int_flow_lift_01_050(32 * int_flow_scalar)			//LS7 
label int_flow_lift_02_100(66.2 * int_flow_scalar)
label int_flow_lift_03_150(109 * int_flow_scalar)
label int_flow_lift_04_200(151 * int_flow_scalar)
label int_flow_lift_05_250(186 * int_flow_scalar)
label int_flow_lift_06_300(215 * int_flow_scalar)
label int_flow_lift_07_350(237 * int_flow_scalar)
label int_flow_lift_08_400(264 * int_flow_scalar)
label int_flow_lift_09_450(290 * int_flow_scalar)
label int_flow_lift_10_500(302 * int_flow_scalar)
label int_flow_lift_11_550(317 * int_flow_scalar)
label int_flow_lift_12_600(332 * int_flow_scalar)
label int_flow_lift_13_650(350 * int_flow_scalar)
label int_flow_lift_14_700(359 * int_flow_scalar)
label int_flow_lift_15_750(261 * int_flow_scalar)
//exhaust
label exh_flow_scalar(1.0)
label exh_flow_lift_01_050(21.5 * exh_flow_scalar)			//LS7
label exh_flow_lift_02_100(47.3 * exh_flow_scalar)
label exh_flow_lift_03_150(81.5 * exh_flow_scalar)
label exh_flow_lift_04_200(111 * exh_flow_scalar)
label exh_flow_lift_05_250(140 * exh_flow_scalar)
label exh_flow_lift_06_300(167 * exh_flow_scalar)
label exh_flow_lift_07_350(195 * exh_flow_scalar)
label exh_flow_lift_08_400(227 * exh_flow_scalar)
label exh_flow_lift_09_450(243 * exh_flow_scalar)
label exh_flow_lift_10_500(253 * exh_flow_scalar)
label exh_flow_lift_11_550(259 * exh_flow_scalar)
label exh_flow_lift_12_600(264 * exh_flow_scalar)
label exh_flow_lift_13_650(267 * exh_flow_scalar)
label exh_flow_lift_14_700(270 * exh_flow_scalar)
label exh_flow_lift_15_750(272 * exh_flow_scalar)

//exhaust
label exh_c1_primary_length(32 * units.inch)
label exh_c2_primary_length(32 * units.inch)
label exh_c3_primary_length(32 * units.inch)
label exh_c4_primary_length(32 * units.inch)
label exh_c5_primary_length(32 * units.inch)
label exh_c6_primary_length(32 * units.inch)
label exh_c7_primary_length(32 * units.inch)
label exh_c8_primary_length(32 * units.inch)
label exh_primary_dia(1.875) //in inches. not using units because this is passed to cfm trendline equation
label exh_collector_dia(3.0) //in inches. not using units because this is passed to cfm trendline equation
label exh_length_after_collector(15 * units.inch) 
label exh_type(ir_lib.real_engine_0)					//default_0,real_engine_0,real_engine_1,real_engine_2,sharp_0,mild_exhaust_0,mild_exhaust_0_reverb,minimal_muffling_01,minimal_muffling_02,minimal_muffling_03

//rev limits				
label redline_engine(7200 * units.rpm)					//LS7
label rev_limit_cutout(7600 * units.rpm)				//LS7 
label rev_cut_duration(0.1)								//LS7 
label rev_limit_ignition(8000 * units.rpm)

//starter
label start_torque(600 * units.lb_ft)
label start_rpm(999 * units.rpm)

/*###########################################################//
//################END OF TUNING INPUTS#######################//
//###########################################################*/

//Sound
label eng_snd_hf_gain(0.002)
label eng_snd_noise(0.2)
label eng_snd_jitter(0.5) 
label exh_snd_audio_volume(0.4)

//Advanced
label crank_position_x(0.0 * units.mm)
label crank_position_y(0.0 * units.mm)
label crank_moment_of_inertia(
        disk_moment_of_inertia(mass: crank_mass, radius: crank_stroke / 2)
    )
label flywheel_moment(
        disk_moment_of_inertia(mass: crank_flywheel_mass, radius: crank_flywheel_dia / 2)
    )
label other_moment( 									// Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 10 * units.kg, radius: 6.0 * units.cm)
    )
label rod_center_of_mass(0.0)
label piston_blowby(0.1)
label int_velocity_decay(0.5)
label exh_velocity_decay(0.5)
label cam_steps(256)

//calculations
float cycle(2 * 360 * units.deg)
float cylinder_vol(constants.pi * (piston_bore_diameter / 2) * (piston_bore_diameter / 2) * crank_stroke)
float comb_vol_by_CR(cylinder_vol / (eng_compression_ratio - 1.0))
float exh_volume(exh_length_after_collector * circle_area(exh_collector_dia / 2) * units.inch)
float valve_int_lift(valve_int_lift_advertised / valve_advertised_lift_rocker_ratio * valve_int_rocker_ratio_sim)					//LS7 
float valve_exh_lift(valve_exh_lift_advertised / valve_advertised_lift_rocker_ratio * valve_exh_rocker_ratio_sim)					//LS7
float head_int_runner_xsec_area(head_int_valve2runner_area_ratio * circle_area(head_int_valve_dia / 2))
float head_exh_runner_xsec_area(head_exh_valve2runner_area_ratio * circle_area(head_exh_valve_dia / 2))
float total_int_runner_length(head_int_runner_length + int_man_runner_length)
float total_exh_c1_primary_length(exh_c1_primary_length + head_exh_runner_length)
float total_exh_c2_primary_length(exh_c2_primary_length + head_exh_runner_length)
float total_exh_c3_primary_length(exh_c3_primary_length + head_exh_runner_length)
float total_exh_c4_primary_length(exh_c4_primary_length + head_exh_runner_length)
float total_exh_c5_primary_length(exh_c5_primary_length + head_exh_runner_length)
float total_exh_c6_primary_length(exh_c6_primary_length + head_exh_runner_length)
float total_exh_c7_primary_length(exh_c7_primary_length + head_exh_runner_length)
float total_exh_c8_primary_length(exh_c8_primary_length + head_exh_runner_length)
float exh_primary_flow_rate(
	-17.275*exh_primary_dia*exh_primary_dia*exh_primary_dia+189.197*exh_primary_dia*exh_primary_dia+-159.007*exh_primary_dia+10
)
float exh_collector_flow_rate(
	-17.275*exh_collector_dia*exh_collector_dia*exh_collector_dia+189.197*exh_collector_dia*exh_collector_dia+-159.007*exh_collector_dia+10
)

//fuels setup
//pumpus87gas, pumpus93gas
fuel pumpus87gas(
    name: "pumpus87gas",
    molecular_mass: 90 * units.g,
    energy_density: 44 * units.kJ / units.g,
    density: 0.73 * units.kg / units.L,
    molecular_afr: 12.5,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pumpus93gas(
    name: "pumpus93gas",
    molecular_mass: 90 * units.g,
    energy_density: 44 * units.kJ / units.g,
    density: 0.73 * units.kg / units.L,
    molecular_afr: 12.5,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

public node BallGanda_LSx_BYOE {
    alias output __out: engine;

    engine engine(
        name: engine_name,
        starter_torque: start_torque,
        starter_speed: start_rpm,
        redline: redline_engine,
        fuel: type_of_fuel,
		simulation_frequency: sim_freq,
		throttle_gamma: 2.0,
		hf_gain: eng_snd_hf_gain,
        noise: eng_snd_noise,
        jitter: eng_snd_jitter
    )

    crankshaft c0(
        throw: crank_stroke / 2,
        flywheel_mass: crank_flywheel_mass,
        mass: crank_mass,
        friction_torque: eng_rot_friction_torq,
        moment_of_inertia:
			crank_moment_of_inertia + flywheel_moment + other_moment,
        position_x: crank_position_x,
        position_y: crank_position_y,
        tdc: 90 * units.deg - (eng_v_angle / 2.0)
    )
	
	// 1 8 7 2 6 5 4 3
    rod_journal rj0(angle: 0 * units.deg)
    rod_journal rj1(angle: 270 * units.deg)
    rod_journal rj2(angle: 90 * units.deg)
    rod_journal rj3(angle: 180 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass_wpin,
        compression_height: piston_comp_height,
        wrist_pin_position: 0.0,
		blowby: k_28inH2O(piston_blowby),
        displacement: 0.0						//using compression ratio based calc
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: rod_center_of_mass,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: piston_bore_diameter,
        deck_height: crank_stroke / 2 + rod_length + piston_comp_height
    )

    intake intake(
        plenum_volume: int_man_plenum_vol,
        plenum_cross_section_area: int_man_plenum_xsec_area,
		runner_flow_rate: k_carb(int_man_runner_flow_rate),
        runner_length: total_int_runner_length,
        intake_flow_rate: k_carb(int_throttle_cfm),
        idle_flow_rate: k_carb(idle_cfm),
        idle_throttle_plate_position: idle_adjust,
		molecular_afr: tune_afr,
        velocity_decay: int_velocity_decay
    )

    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(1305),
		collector_cross_section_area: circle_area(3.5 * units.inch),
        primary_flow_rate: k_carb(261),
        velocity_decay: 1.0, //0.5
		volume: 10 * units.L
        
    )
	exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(1305),
		collector_cross_section_area: circle_area(3.5 * units.inch),
        primary_flow_rate: k_carb(261),
        velocity_decay: 1.0, //0.5
		volume: 10 * units.L
        
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(exh_collector_flow_rate),
        primary_flow_rate: k_carb(exh_primary_flow_rate),
        velocity_decay: exh_velocity_decay,
		collector_cross_section_area: circle_area(exh_collector_dia / 2 * units.inch),
        volume: exh_volume
    )

	exhaust_system exhaust0(
		es_params,
		audio_volume: exh_snd_audio_volume,
		impulse_response: exh_type,
		length: exh_length_after_collector
	)
	
    exhaust_system exhaust1(
		es_params,
		audio_volume: exh_snd_audio_volume,
		impulse_response: exh_type,
		length: exh_length_after_collector
	)

    cylinder_bank b0(bank_params, angle: -eng_v_angle / 2.0)
    cylinder_bank b1(bank_params, angle: eng_v_angle / 2.0)
	
    b0 // 1 3 5 7
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
			primary_length: total_exh_c1_primary_length,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
			sound_attenuation: 1.1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
			primary_length: total_exh_c3_primary_length,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
			sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
			primary_length: total_exh_c5_primary_length,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5,
			sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
			primary_length: total_exh_c7_primary_length,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire7,
			sound_attenuation: 0.8
        )

    b1 // 2 4 6 8
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
			primary_length: total_exh_c2_primary_length,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
			sound_attenuation: 1.1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
			primary_length: total_exh_c4_primary_length,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
			sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
			primary_length: total_exh_c6_primary_length,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
			sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
			primary_length: total_exh_c7_primary_length,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8,
			sound_attenuation: 0.8
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

	engine.add_crankshaft(c0)

	 b0.set_cylinder_head (
        lsx_cylinder_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: eng_head0_flip_display
        )
    )
	
    b1.set_cylinder_head (
        lsx_cylinder_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: eng_head1_flip_display
        )
    )

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: cam_int_dur_050,
        gamma: 0.8,
        lift: valve_int_lift,
        steps: cam_steps
    )

	harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: cam_exh_dur_050,
        gamma: 0.8,
        lift: valve_exh_lift,
        steps: cam_steps
    )

    generic_camshaft_builder camshaft(
        lobe_profile: "N/A",
          intake_lobe_profile: intake_lobe,
          exhaust_lobe_profile: exhaust_lobe
    )

    function timing_curve(500 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, timing_rpm_0000)
		.add_sample(0500 * units.rpm, timing_rpm_0500)
        .add_sample(1000 * units.rpm, timing_rpm_1000)
		.add_sample(1500 * units.rpm, timing_rpm_1500)
        .add_sample(2000 * units.rpm, timing_rpm_2000)
		.add_sample(2500 * units.rpm, timing_rpm_2500)
        .add_sample(3000 * units.rpm, timing_rpm_3000)
		.add_sample(3500 * units.rpm, timing_rpm_3500)
        .add_sample(4000 * units.rpm, timing_rpm_4000)
		.add_sample(4500 * units.rpm, timing_rpm_4500)
        .add_sample(5000 * units.rpm, timing_rpm_5000)
		.add_sample(5500 * units.rpm, timing_rpm_5500)
        .add_sample(6000 * units.rpm, timing_rpm_6000)
		.add_sample(6500 * units.rpm, timing_rpm_6500)
        .add_sample(7000 * units.rpm, timing_rpm_7000)
		.add_sample(7500 * units.rpm, timing_rpm_7500)
		.add_sample(8000 * units.rpm, timing_rpm_8000)
		.add_sample(8500 * units.rpm, timing_rpm_8500)
		.add_sample(9000 * units.rpm, timing_rpm_9000)

    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: rev_limit_cutout,
		limiter_duration: rev_cut_duration
    )
    ignition_module
		.connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
        .connect_wire(wires.wire8, (1.0 / 8.0) * cycle)
        .connect_wire(wires.wire7, (2.0 / 8.0) * cycle)
        .connect_wire(wires.wire2, (3.0 / 8.0) * cycle)
        .connect_wire(wires.wire6, (4.0 / 8.0) * cycle)
        .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
        .connect_wire(wires.wire4, (6.0 / 8.0) * cycle)
        .connect_wire(wires.wire3, (7.0 / 8.0) * cycle)
	engine.add_ignition_module(ignition_module)
	wires wires()
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node lsx_cylinder_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: comb_vol_by_CR;
    input intake_runner_volume: head_int_runner_vol;
    input intake_runner_cross_section_area: head_int_runner_xsec_area;
    input exhaust_runner_volume: head_exh_runner_vol;
    input exhaust_runner_cross_section_area: head_exh_runner_xsec_area;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
	input flip_display: false;
	
	alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, int_flow_lift_01_050 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, int_flow_lift_02_100 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, int_flow_lift_03_150 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, int_flow_lift_04_200 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, int_flow_lift_05_250 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, int_flow_lift_06_300 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, int_flow_lift_07_350 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, int_flow_lift_08_400 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, int_flow_lift_09_450 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, int_flow_lift_10_500 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, int_flow_lift_11_550 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, int_flow_lift_12_600 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, int_flow_lift_13_650 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, int_flow_lift_14_700 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, exh_flow_lift_01_050 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, exh_flow_lift_02_100 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, exh_flow_lift_03_150 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, exh_flow_lift_04_200 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, exh_flow_lift_05_250 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, exh_flow_lift_06_300 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, exh_flow_lift_07_350 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, exh_flow_lift_08_400 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, exh_flow_lift_09_450 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, exh_flow_lift_10_500 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, exh_flow_lift_11_550 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, exh_flow_lift_12_600 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, exh_flow_lift_13_650 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, exh_flow_lift_14_700 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node generic_camshaft_builder {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: (cam_int_lobe_center - cam_advance + cam_exh_lobe_center) / 2;
    input intake_lobe_center: cam_int_lobe_center - cam_advance;
    input exhaust_lobe_center: cam_exh_lobe_center + cam_advance;
    input advance: 0.0 * units.deg; //advance is in the lobe center calc
    input base_radius: cam_inner_base_circle / 2;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(90 * units.deg)
    label rot360(360 * units.deg)

    // 1 8 7 2 6 5 4 3
	// 0 1 2 3 4 5 6 7
    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot) // 1
        .add_lobe(rot360 - exhaust_lobe_center + 7 * rot) // 3
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot) // 5
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot) // 7
    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot) // 1
        .add_lobe(rot360 + intake_lobe_center + 7 * rot) // 3
        .add_lobe(rot360 + intake_lobe_center + 5 * rot) // 5
        .add_lobe(rot360 + intake_lobe_center + 2 * rot) // 7

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot) // 2
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot) // 4
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot) // 6
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot) // 8
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 3 * rot) // 2
        .add_lobe(rot360 + intake_lobe_center + 6 * rot) // 4
        .add_lobe(rot360 + intake_lobe_center + 4 * rot) // 6
        .add_lobe(rot360 + intake_lobe_center + 1 * rot) // 8
}



