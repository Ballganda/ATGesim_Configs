import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

// engine_name
label engine_name("generic_i6_firing_153624_R0_2")

label sim_freq(7000)

//idle adjustment
label idle_adjust(0.996)
label idle_cfm(0.1)

//fuel options: 
label type_of_fuel(pump93gas)

//engine layout
label crank_stroke(102 * units.mm)						//LL8 102.00
label crank_mass(20 * units.kg)							//LL8 ???.00/20
label crank_flywheel_mass(8 * units.kg)				//LL8 ???.00/10
label piston_bore_diameter(93 * units.mm)				//LL8  93.00
label piston_comp_height(28.73 * units.mm)				//LL8  28.73
label piston_mass_wpin(574 * units.g)					//LL8 574.00
label piston_pin_position(0.0)							//LL8   0.00
label piston_dome_vol(0.0) //Positive is dome			//LL8 ???.00/0
label rod_length(152 * units.mm)						//LL8 152.00
label rod_mass(730 * units.g)							//LL8 730.00
label eng_compression_ratio(10.3)						//LL8  10.30
label eng_deck2piston_clearance(1 * units.mm)			//LL8 ???.00/2
label eng_rot_friction_torq(25 * units.Nm)				//LL8 ???.00/10

//head
label head_combustion_chamber_vol(68.0 * units.cc)		//LL8 ???.00/38
label head_int_runner_vol(188.0 * units.cc)				//LL8 188.00
label head_int_runner_xsec_area(24.4 * units.cm2)		//LL8  24.40
label head_exh_runner_vol(83 * units.cc)				//LL8  83.00
label head_exh_runner_xsec_area(20 * units.cm2)			//LL8 ???.00
//head flow
//intake
label int_flow_scalar(1.0)
label int_flow_lift_01(12.2 * int_flow_scalar)			//LL8 
label int_flow_lift_02(54.9 * int_flow_scalar)
label int_flow_lift_03(94.2 * int_flow_scalar)
label int_flow_lift_04(129.9 * int_flow_scalar)
label int_flow_lift_05(162.1 * int_flow_scalar)
label int_flow_lift_06(190.7 * int_flow_scalar)
label int_flow_lift_07(215.8 * int_flow_scalar)
label int_flow_lift_08(237.4 * int_flow_scalar)
label int_flow_lift_09(255.4 * int_flow_scalar)
label int_flow_lift_10(269.9 * int_flow_scalar)
label int_flow_lift_11(280.8 * int_flow_scalar)
label int_flow_lift_12(288.2 * int_flow_scalar)
//exhaust
label exh_flow_scalar(1.0)
label exh_flow_lift_01(12.9 * exh_flow_scalar)			//LL8 
label exh_flow_lift_02(71.0 * exh_flow_scalar)
label exh_flow_lift_03(145.5 * exh_flow_scalar)
label exh_flow_lift_04(132.6 * exh_flow_scalar)
label exh_flow_lift_05(145.5 * exh_flow_scalar)
label exh_flow_lift_06(151.7 * exh_flow_scalar)
label exh_flow_lift_07(153.9 * exh_flow_scalar)
label exh_flow_lift_08(154.6 * exh_flow_scalar)
label exh_flow_lift_09(155.3 * exh_flow_scalar)
label exh_flow_lift_10(156.8 * exh_flow_scalar)
label exh_flow_lift_11(159.3 * exh_flow_scalar)
label exh_flow_lift_12(162.3 * exh_flow_scalar)

//intake manifold 
label int_throttle_cfm(920)								//LL8 ???/920
label int_man_plenum_vol(0.7 * units.L)					//LL8 ???/1.5
label int_man_plenum_xsec_area(75.0 * units.cm2)		//LL8 ???/100
label int_man_runner_flow_rate(400)						//LL8 ???/500
label int_man_runner_length(100 * units.mm)				//LL8 ???/100

//camshaft
label cam_int_dur_050(170 * units.deg)					//LL8 170,
label valve_int_lift(10.92 * units.mm)					//LL8 10.92
label cam_exh_dur_050(184 * units.deg)					//LL8 184,
label valve_exh_lift(9.525 * units.mm)					//LL8 9.525
label cam_lobe_separation(112 * units.deg)				//LL8 112,
label cam_advance(0 * units.deg)						//LL8 ???/0
label cam_int_vvt(0 * units.deg)
label cam_exh_vvt(-16 * units.deg)
label cam_inner_base_circle(22 * units.mm)			//LL8 ???/25.4

//exhaust
label exh_primary_length(10 * units.cm)					//LL8 ???/15
label exh_primary_flow_rate(300)
label exh_collector_flow_rate(800)
label exh_collector_dia(51 * units.mm)
label exh_volume(5 * units.L)					//LL8 ???/1.5


//timing
label timing_advance(0.0)
label timing_rpm_0000((0 + timing_advance) * units.deg)
label timing_rpm_0500((1 + timing_advance) * units.deg)
label timing_rpm_1000((1 + timing_advance) * units.deg)
label timing_rpm_1500((1 + timing_advance) * units.deg)
label timing_rpm_2000((1 + timing_advance) * units.deg)
label timing_rpm_2500((5 + timing_advance) * units.deg)
label timing_rpm_3000((7 + timing_advance) * units.deg)
label timing_rpm_3500((10 + timing_advance) * units.deg)
label timing_rpm_4000((12 + timing_advance) * units.deg)
label timing_rpm_4500((15 + timing_advance) * units.deg)
label timing_rpm_5000((15 + timing_advance) * units.deg)
label timing_rpm_5500((20 + timing_advance) * units.deg)
label timing_rpm_6000((20 + timing_advance) * units.deg)
label timing_rpm_6500((20 + timing_advance) * units.deg)
label timing_rpm_7000((-10 + timing_advance) * units.deg)
label timing_rpm_7500((-15 + timing_advance) * units.deg)
label timing_rpm_8000((-20 + timing_advance) * units.deg)
label timing_rpm_8500((-20 + timing_advance) * units.deg)
label timing_rpm_9000((-20 + timing_advance) * units.deg)

//rev limits
label redline_engine(6500 * units.rpm)
label rev_limit_cutout(9000 * units.rpm)
label rev_cut_duration(0.05)
label rev_limit_ignition(9000 * units.rpm)

//starter
label start_torque(300 * units.lb_ft)
label start_rpm(400 * units.rpm)

//calculations
label cycle(2 * 360 * units.deg)
//float squish_bore_vol(constants.pi * (piston_bore_diameter * piston_bore_diameter / 4) * eng_deck2piston_clearance)
//float cylinder_vol(constants.pi * (piston_bore_diameter * piston_bore_diameter / 4) * crank_stroke)
//float squish_tot_comb_vol(cylinder_vol / (eng_compression_ratio - 1))
//float squish_vol_4_cr(squish_tot_comb_vol - head_combustion_chamber_vol + piston_dome_vol - squish_bore_vol)
//label comb_vol_by_CR((squish_vol_4_cr + head_combustion_chamber_vol) * units.mm3)

fuel pump93gas(
    name: "pump93gas",
    molecular_mass: 100 * units.g,
    energy_density: 48.1 * units.kJ / units.g,
    density: 0.755 * units.kg / units.L,
    molecular_afr: 14.7,
    max_burning_efficiency: 0.8,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

public node generic_i6_firing_153624_R0_2 {
    alias output __out: engine;

    engine engine(
        name: engine_name,
        starter_torque: start_torque,
        starter_speed: start_rpm,
        redline: redline_engine,
        fuel: type_of_fuel,
		simulation_frequency: sim_freq,
		throttle_gamma: 2.0
    )

    wires wires()

    crankshaft c0(
        throw: crank_stroke / 2,
        flywheel_mass: crank_flywheel_mass,
        mass: crank_mass,
        friction_torque: eng_rot_friction_torq,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: 120*units.deg)
    rod_journal rj2(angle: 240*units.deg)
    rod_journal rj3(angle: 240*units.deg)
    rod_journal rj4(angle: 120*units.deg)
    rod_journal rj5(angle: 0*units.deg)
	
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass_wpin,
        compression_height: piston_comp_height,
        wrist_pin_position: piston_pin_position,
        displacement: piston_dome_vol
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: piston_bore_diameter,
        deck_height: crank_stroke / 2 + rod_length + piston_comp_height + eng_deck2piston_clearance
    )
	
    TB_plenum_runner_intake intake(
	)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(exh_collector_flow_rate),
        primary_tube_length: exh_primary_length,
        primary_flow_rate: k_carb(exh_primary_flow_rate),
        velocity_decay: 0.5,
		collector_cross_section_area: circle_area(exh_collector_dia / 2),
        volume: exh_volume
    )

    exhaust_system exhaust0(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire1
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire3
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    I6_153624_camshaft_builder camshaft(
	    lobe_profile: I6_153624_lobe_profile_int(),
		ex_lobe_profile: I6_153624_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        I6_153624_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, timing_rpm_0000)
		.add_sample(0500 * units.rpm, timing_rpm_0500)
        .add_sample(1000 * units.rpm, timing_rpm_1000)
		.add_sample(1500 * units.rpm, timing_rpm_1500)
        .add_sample(2000 * units.rpm, timing_rpm_2000)
		.add_sample(2500 * units.rpm, timing_rpm_2500)
        .add_sample(3000 * units.rpm, timing_rpm_3000)
		.add_sample(3500 * units.rpm, timing_rpm_3500)
        .add_sample(4000 * units.rpm, timing_rpm_4000)
		.add_sample(4500 * units.rpm, timing_rpm_4500)
        .add_sample(5000 * units.rpm, timing_rpm_5000)
		.add_sample(5500 * units.rpm, timing_rpm_5500)
        .add_sample(6000 * units.rpm, timing_rpm_6000)
		.add_sample(6500 * units.rpm, timing_rpm_6500)
        .add_sample(7000 * units.rpm, timing_rpm_7000)
		.add_sample(7500 * units.rpm, timing_rpm_7500)
		.add_sample(8000 * units.rpm, timing_rpm_8000)
		.add_sample(8500 * units.rpm, timing_rpm_8500)
		.add_sample(9000 * units.rpm, timing_rpm_9000)
		

    engine.add_ignition_module(
        I6_153624_ignition(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: rev_limit_cutout
        ))
}

public node I6_153624_ignition {
    input wires;
    input timing_curve;
    input rev_limit: rev_limit_ignition;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: rev_cut_duration)
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
			.connect_wire(wires.wire3, (2.0/6.0) * cycle)
			.connect_wire(wires.wire6, (3.0/6.0) * cycle)
			.connect_wire(wires.wire2, (4.0/6.0) * cycle)
			.connect_wire(wires.wire4, (5.0/6.0) * cycle);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node I6_153624_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: cam_int_dur_050,
            gamma: 0.8,
            lift: valve_int_lift,
            steps: 100
        );
}

public node I6_153624_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: cam_exh_dur_050,
            gamma: 0.8,
            lift: valve_exh_lift,
            steps: 100
        );
}

public node I6_153624_camshaft_builder {
    input lobe_profile: I6_153624_lobe_profile_int();
	input ex_lobe_profile: I6_153624_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: cam_lobe_separation;
    input intake_lobe_center: cam_lobe_separation - cam_advance - cam_int_vvt;
    input exhaust_lobe_center: cam_lobe_separation + cam_advance + cam_exh_vvt;
    input advance: cam_advance;
    input base_radius: cam_inner_base_circle / 2 ;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 3 * rot120)

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node I6_153624_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: head_combustion_chamber_vol;
	//input chamber_volume: comb_vol_by_CR;
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, int_flow_lift_01 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, int_flow_lift_02 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, int_flow_lift_03 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, int_flow_lift_04 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, int_flow_lift_05 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, int_flow_lift_06 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, int_flow_lift_07 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, int_flow_lift_08 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, int_flow_lift_09 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, int_flow_lift_10 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, int_flow_lift_11 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, int_flow_lift_12 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, exh_flow_lift_01 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, exh_flow_lift_02 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, exh_flow_lift_03 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, exh_flow_lift_04 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, exh_flow_lift_05 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, exh_flow_lift_06 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, exh_flow_lift_07 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, exh_flow_lift_08 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, exh_flow_lift_09 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, exh_flow_lift_10 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, exh_flow_lift_11 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, exh_flow_lift_12 * flow_attenuation)

    cylinder_head head(
        chamber_volume: head_combustion_chamber_vol,
		//chamber_volume: comb_vol_by_CR,
        intake_runner_volume: head_int_runner_vol,
        intake_runner_cross_section_area: head_int_runner_xsec_area,
		exhaust_runner_volume: head_exh_runner_vol,
		exhaust_runner_cross_section_area: head_exh_runner_xsec_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node TB_plenum_runner_intake {
    input carburetor_cfm: int_throttle_cfm;
    input idle_flow_rate_cfm: idle_cfm;
    input idle_throttle_plate_position: idle_adjust;

    alias output __out: intake;

    intake intake(
        plenum_volume: int_man_plenum_vol,
        plenum_cross_section_area: int_man_plenum_xsec_area,
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        runner_flow_rate: k_carb(int_man_runner_flow_rate),
        runner_length: int_man_runner_length,
        velocity_decay: 0.1
    )
}
