import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

// engine_name
label engine_name("i6_153624_vvt")

label sim_freq(10000)

//idle adjustment
label idle_adjust(0.994)
label idle_cfm(0.1)

/*fuel options:Fuels are not working other than pump gas without ethanol
pumpus87gas, pumpus93gas, pump_us87e10, pump_us93e10, pump_use85, pump_use100, hydrogen, nitromethane
afr12.5 14.7 12.5 14.7    11.9 14.1     11.9 14.1     6.98 9.76   6.429 9.0    34.3 34.3 1.7 1.7
*/
//fuel setting
label type_of_fuel(pumpus87gas)							//Fuel type in use
float tune_afr(13.5)									//afr engine runs at WOT

//engine layout
label crank_stroke(102 * units.mm)						//LL8 102.00
label crank_mass(35 * units.kg)							//LL8 ???.00/25
label crank_flywheel_mass(13.15 * units.kg)				//LL8 ???.00/13.15
label piston_bore_diameter(93 * units.mm)				//LL8  93.00
label piston_comp_height(27.94 * units.mm)				//LL8  27.94
label piston_mass_wpin(574 * units.g)					//LL8 574.00
label rod_length(152 * units.mm)						//LL8 152.00
label rod_mass(730 * units.g)							//LL8 730.00
label eng_compression_ratio(10.3)						//LL8  10.30
label eng_rot_friction_torq(70 * units.Nm)				//LL8 ???.00/10

//head
label head_int_runner_vol(188.0 * units.cc)				//LL8 188.00
label head_int_runner_xsec_area(24.40 * units.cm2)		//LL8  24.40
label head_exh_runner_vol(83 * units.cc)				//LL8  83.00
label head_exh_runner_xsec_area(18.00 * units.cm2)			//LL8 ???.00
//head flow
//intake
label int_flow_scalar(1.0)
label int_flow_lift_01(12.2 * int_flow_scalar)			//LL8 
label int_flow_lift_02(54.9 * int_flow_scalar)
label int_flow_lift_03(94.2 * int_flow_scalar)
label int_flow_lift_04(129.9 * int_flow_scalar)
label int_flow_lift_05(162.1 * int_flow_scalar)
label int_flow_lift_06(190.7 * int_flow_scalar)
label int_flow_lift_07(215.8 * int_flow_scalar)
label int_flow_lift_08(237.4 * int_flow_scalar)
label int_flow_lift_09(255.4 * int_flow_scalar)
label int_flow_lift_10(269.9 * int_flow_scalar)
label int_flow_lift_11(280.8 * int_flow_scalar)
label int_flow_lift_12(288.2 * int_flow_scalar)
//exhaust
label exh_flow_scalar(1.0)
label exh_flow_lift_01(12.9 * exh_flow_scalar)			//LL8 
label exh_flow_lift_02(71.0 * exh_flow_scalar)
label exh_flow_lift_03(145.5 * exh_flow_scalar)
label exh_flow_lift_04(132.6 * exh_flow_scalar)
label exh_flow_lift_05(145.5 * exh_flow_scalar)
label exh_flow_lift_06(151.7 * exh_flow_scalar)
label exh_flow_lift_07(153.9 * exh_flow_scalar)
label exh_flow_lift_08(154.6 * exh_flow_scalar)
label exh_flow_lift_09(155.3 * exh_flow_scalar)
label exh_flow_lift_10(156.8 * exh_flow_scalar)
label exh_flow_lift_11(159.3 * exh_flow_scalar)
label exh_flow_lift_12(162.3 * exh_flow_scalar)

//intake manifold 
label int_throttle_cfm(920)								//LL8 ???/920
label int_man_plenum_vol(0.7 * units.L)					//LL8 ???/1.5
label int_man_plenum_xsec_area(75.0 * units.cm2)		//LL8 ???/100
label int_man_runner_flow_rate(615)						//LL8 ???/500
label int_man_runner_length(86 * units.mm)				//LL8 ???/100

//camshaft
label cam_int_dur_050(170 * units.deg)					//LL8 170,
label valve_int_lift(10.92 * units.mm)					//LL8 10.92
label cam_exh_dur_050(184 * units.deg)					//LL8 184,
label valve_exh_lift(9.525 * units.mm)					//LL8 9.525
label cam_lobe_separation(112 * units.deg)				//LL8 112,
label cam_vtec_lobe_separation(112 * units.deg)
label int_lobe_center(112 * units.deg)
label exh_lobe_center(112 * units.deg)
label cam_advance(0 * units.deg)						//LL8 ???/0
label cam_exh_vvt_start(-12 * units.deg)
label cam_exh_vvt_end(-24 * units.deg)
label cam_inner_base_circle(22 * units.mm)			//LL8 ???/25.4

//exhaust
label exh_primary_length(225 * units.mm)					//LL8 ???/
label exh_primary_flow_rate(200)
label exh_collector_flow_rate(550)
label exh_collector_dia(63.5 * units.mm)
label exh_length_after_collector(1500 * units.mm)

//timing
label timing_advance(0.0)
label timing_rpm_0000((1 + timing_advance) * units.deg)
label timing_rpm_0500((1 + timing_advance) * units.deg)
label timing_rpm_1000((2 + timing_advance) * units.deg)
label timing_rpm_1500((5 + timing_advance) * units.deg)
label timing_rpm_2000((5 + timing_advance) * units.deg)
label timing_rpm_2500((5 + timing_advance) * units.deg)
label timing_rpm_3000((5 + timing_advance) * units.deg)
label timing_rpm_3500((6 + timing_advance) * units.deg)
label timing_rpm_4000((8 + timing_advance) * units.deg)
label timing_rpm_4500((11 + timing_advance) * units.deg)
label timing_rpm_5000((16 + timing_advance) * units.deg)
label timing_rpm_5500((18 + timing_advance) * units.deg)
label timing_rpm_6000((20 + timing_advance) * units.deg)
label timing_rpm_6500((22 + timing_advance) * units.deg)
label timing_rpm_7000((24 + timing_advance) * units.deg)
label timing_rpm_7500((26 + timing_advance) * units.deg)
label timing_rpm_8000((15 + timing_advance) * units.deg)
label timing_rpm_8500((15 + timing_advance) * units.deg)
label timing_rpm_9000((15 + timing_advance) * units.deg)

//rev limits
label redline_engine(6500 * units.rpm)
label rev_limit_cutout(7500 * units.rpm)
label rev_cut_duration(0.05)
label rev_limit_ignition(7500 * units.rpm)

//starter
label start_torque(150 * units.lb_ft)
label start_rpm(400 * units.rpm)

//calculations
label cycle(2 * 360 * units.deg)
float cylinder_vol(constants.pi * (piston_bore_diameter / 2) * (piston_bore_diameter / 2) * crank_stroke)
float comb_vol_by_CR(cylinder_vol / (eng_compression_ratio - 1.0))
float exh_volume(exh_length_after_collector * circle_area(exh_collector_dia / 2))

//not in use. calculating with alternate method, CR based
//label piston_dome_vol(0.0)//Positive is dome			//LL8 ???.00/0
//label eng_deck2piston_clearance(1 * units.mm) 		//LL8 ???
//label head_combustion_chamber_vol(64.0 * units.cc)	//LL8 ???.00/64
//label piston_pin_position(0.0)							//LL8   0.00

//fuels setup
//pumpus87gas, pumpus93gas, pump_us87e10, pump_us93e10, pump_use85, pump_use100, hydrogen, nitromethane
fuel pumpus87gas(
    name: "pumpus87gas",
    molecular_mass: 90 * units.g,
    energy_density: 44 * units.kJ / units.g,
    density: 0.73 * units.kg / units.L,
    molecular_afr: 12.5,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pumpus93gas(
    name: "pumpus93gas",
    molecular_mass: 90 * units.g,
    energy_density: 44 * units.kJ / units.g,
    density: 0.73 * units.kg / units.L,
    molecular_afr: 12.5,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pump_us87e10(
    name: "pump_us87e10",
    molecular_mass: 85.6 * units.g,
    energy_density: 42.6 * units.kJ / units.g,
    density: 0.736 * units.kg / units.L,
    molecular_afr: 11.9,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pump_us93e10(
    name: "pump_us93e10",
    molecular_mass: 85.6 * units.g,
    energy_density: 42.6 * units.kJ / units.g,
    density: 0.736 * units.kg / units.L,
    molecular_afr: 11.9,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pump_use85(
    name: "pump_use85",
    molecular_mass: 52.6 * units.g,
    energy_density: 32.6 * units.kJ / units.g,
    density: 0.784 * units.kg / units.L,
    molecular_afr: 6.98,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel pump_use100(
    name: "pump_use100",
    molecular_mass: 46.1 * units.g,
    energy_density: 29.8 * units.kJ / units.g,
    density: 0.794 * units.kg / units.L,
    molecular_afr: 9.00,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel hydrogen(
    name: "hydrogen",
    molecular_mass: 2.02 * units.g,
    energy_density: 120.0 * units.kJ / units.g,
    density: 0.0696 * units.kg / units.L,
    molecular_afr: 34.3,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel nitromethane(
    name: "nitromethane",
    molecular_mass: 61.04 * units.g,
    energy_density: 11.3 * units.kJ / units.g,
    density: 1.14 * units.kg / units.L,
    molecular_afr: 1.7,
    max_burning_efficiency: 0.85,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

fuel AvGas(
    name: "AvGas",
    molecular_mass: 185 * units.g,
    energy_density: 45.0 * units.kJ / units.g,
    density: 0.72 * units.kg / units.L,
    molecular_afr: 15,
    max_burning_efficiency: 0.8,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0
)

public node i6_153624_vvt {
    alias output __out: engine;

    engine engine(
        name: engine_name,
        starter_torque: start_torque,
        starter_speed: start_rpm,
        redline: redline_engine,
        fuel: type_of_fuel,
		simulation_frequency: sim_freq,
		throttle_gamma: 2.0,
		hf_gain: 0.002,
        noise: 0.253,
        jitter: 0.195
    )

    wires wires()

    crankshaft c0(
        throw: crank_stroke / 2,
        flywheel_mass: crank_flywheel_mass,
        mass: crank_mass,
        friction_torque: eng_rot_friction_torq,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 120.0 * units.deg
    )

	rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: 120*units.deg)
    rod_journal rj2(angle: 240*units.deg)
    rod_journal rj3(angle: 240*units.deg)
    rod_journal rj4(angle: 120*units.deg)
    rod_journal rj5(angle: 0*units.deg)
	
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: piston_mass_wpin,
        compression_height: piston_comp_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: piston_bore_diameter,
        deck_height: crank_stroke / 2 + rod_length + piston_comp_height
    )
	
	TB_plenum_runner_intake intake()
	
    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(exh_collector_flow_rate),
        primary_tube_length: exh_primary_length,
        primary_flow_rate: k_carb(exh_primary_flow_rate),
        velocity_decay: 0.5,
		collector_cross_section_area: circle_area(exh_collector_dia / 2),
        volume: exh_volume
    )

    exhaust_system exhaust0(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: 0 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire1
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire3
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

	harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: cam_int_dur_050,
        gamma: 0.8,
        lift: valve_int_lift,
        steps: 100
    )

	harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: cam_exh_dur_050,
        gamma: 0.8,
        lift: valve_exh_lift,
        steps: 100
    )
	
	harmonic_cam_lobe vtec_intake_lobe(
        duration_at_50_thou: cam_int_dur_050,
        gamma: 0.8,
        lift: valve_int_lift,
        steps: 100
    )

	harmonic_cam_lobe vtec_exhaust_lobe(
        duration_at_50_thou: cam_exh_dur_050,
        gamma: 0.8,
        lift: valve_exh_lift,
        steps: 100
    )

    honda_vtec_camshaft camshaft(
        lobe_profile: "N/A",
        vtec_lobe_profile: "N/A",
        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        vtec_intake_lobe_profile: vtec_intake_lobe,
        vtec_exhaust_lobe_profile: vtec_exhaust_lobe
    )

    b0.set_cylinder_head (
        honda_vtec_head(
            camshaft_set: camshaft
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, timing_rpm_0000)
		.add_sample(0500 * units.rpm, timing_rpm_0500)
        .add_sample(1000 * units.rpm, timing_rpm_1000)
		.add_sample(1500 * units.rpm, timing_rpm_1500)
        .add_sample(2000 * units.rpm, timing_rpm_2000)
		.add_sample(2500 * units.rpm, timing_rpm_2500)
        .add_sample(3000 * units.rpm, timing_rpm_3000)
		.add_sample(3500 * units.rpm, timing_rpm_3500)
        .add_sample(4000 * units.rpm, timing_rpm_4000)
		.add_sample(4500 * units.rpm, timing_rpm_4500)
        .add_sample(5000 * units.rpm, timing_rpm_5000)
		.add_sample(5500 * units.rpm, timing_rpm_5500)
        .add_sample(6000 * units.rpm, timing_rpm_6000)
		.add_sample(6500 * units.rpm, timing_rpm_6500)
        .add_sample(7000 * units.rpm, timing_rpm_7000)
		.add_sample(7500 * units.rpm, timing_rpm_7500)
		.add_sample(8000 * units.rpm, timing_rpm_8000)
		.add_sample(8500 * units.rpm, timing_rpm_8500)
		.add_sample(9000 * units.rpm, timing_rpm_9000)
		
    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: rev_limit_cutout,
		limiter_duration: rev_cut_duration
    )
    ignition_module
            .connect_wire(wires.wire1, (0.0/6.0) * cycle)
            .connect_wire(wires.wire5, (1.0/6.0) * cycle)
			.connect_wire(wires.wire3, (2.0/6.0) * cycle)
			.connect_wire(wires.wire6, (3.0/6.0) * cycle)
			.connect_wire(wires.wire2, (4.0/6.0) * cycle)
			.connect_wire(wires.wire4, (5.0/6.0) * cycle)
	engine.add_ignition_module(ignition_module)
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node honda_vtec_head {
	input camshaft_set;
	input chamber_volume: comb_vol_by_CR;
	input intake_runner_volume: head_int_runner_vol;
    input intake_runner_cross_section_area: head_int_runner_xsec_area;
    input exhaust_runner_volume: head_exh_runner_vol;
    input exhaust_runner_cross_section_area: head_exh_runner_xsec_area;
    
	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
	input flip_display: false;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, int_flow_lift_01 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, int_flow_lift_02 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, int_flow_lift_03 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, int_flow_lift_04 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, int_flow_lift_05 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, int_flow_lift_06 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, int_flow_lift_07 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, int_flow_lift_08 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, int_flow_lift_09 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, int_flow_lift_10 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, int_flow_lift_11 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, int_flow_lift_12 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, exh_flow_lift_01 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, exh_flow_lift_02 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, exh_flow_lift_03 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, exh_flow_lift_04 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, exh_flow_lift_05 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, exh_flow_lift_06 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, exh_flow_lift_07 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, exh_flow_lift_08 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, exh_flow_lift_09 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, exh_flow_lift_10 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, exh_flow_lift_11 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, exh_flow_lift_12 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: vtec_valvetrain(
            vtec_intake_camshaft: camshaft_set.vtec_intake_cam,
            vtec_exhaust_camshaft: camshaft_set.vtec_exhaust_cam,
            intake_camshaft: camshaft_set.intake_cam,
            exhaust_camshaft: camshaft_set.exhaust_cam
        ),
        flip_display: flip_display
    )
}

private node honda_vtec_camshaft {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;

    input vtec_lobe_profile;
    input vtec_intake_lobe_profile: vtec_lobe_profile;
    input vtec_exhaust_lobe_profile: vtec_lobe_profile;

    input lobe_separation: 114 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input vtec_lobe_separation: 110 * units.deg;
    input vtec_intake_lobe_center: vtec_lobe_separation;
    input vtec_exhaust_lobe_center: vtec_lobe_separation;   
    input advance: 0 * units.deg; 
    input base_radius: 1.0 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;
    output vtec_intake_cam: _vtec_intake_cam;
    output vtec_exhaust_cam: _vtec_exhaust_cam;

    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)
    camshaft _vtec_intake_cam(params, lobe_profile: vtec_intake_lobe_profile)
    camshaft _vtec_exhaust_cam(params, lobe_profile: vtec_exhaust_lobe_profile)

    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam
        .add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 3 * rot120)
	_exhaust_cam
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
	_vtec_intake_cam
        .add_lobe(rot360 + vtec_intake_lobe_center)
        .add_lobe(rot360 + vtec_intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + vtec_intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + vtec_intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + vtec_intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + vtec_intake_lobe_center + 3 * rot120)
	_vtec_exhaust_cam
        .add_lobe(rot360 - vtec_exhaust_lobe_center)
		.add_lobe(rot360 - vtec_exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - vtec_exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - vtec_exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - vtec_exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - vtec_exhaust_lobe_center + 3 * rot120)	
}

public node TB_plenum_runner_intake {
    input carburetor_cfm: int_throttle_cfm;
    input idle_flow_rate_cfm: idle_cfm;
    input idle_throttle_plate_position: idle_adjust;
	input plenum_volume: int_man_plenum_vol;
	input plenum_cross_section_area: int_man_plenum_xsec_area;
	input runner_flow_rate: k_carb(int_man_runner_flow_rate);
	input runner_length: int_man_runner_length;
	input molecular_afr: tune_afr;

    alias output __out: intake;

    intake intake(
        plenum_volume: plenum_volume,
        plenum_cross_section_area: plenum_cross_section_area,
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        runner_flow_rate: runner_flow_rate,
        runner_length: int_man_runner_length,
		molecular_afr: molecular_afr,
        velocity_decay: 0.1
    )
}
